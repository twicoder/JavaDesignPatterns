设计原则：
类应该对扩展开放，对修改关闭

策略模式：

观察者模式

////////////////////////////////////////////////////////////
装饰者模式：
动态地将责任附加到对象上。
想要扩展功能，装饰者提供有别于继承的另一种选择。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
工厂方法模式：
定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。
工厂方法让类把实例化推迟到子类。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
单件模式：
确保一个类只有一个实例，并提供全局访问点。
////////////////////////////////////////////////////////////



OO原则：
封装变化
多用组合，少用继承
针对接口编程，不针对实现编程
位交互对象之间的松耦合设计而努力
对扩展开放，对修改关闭
要依赖抽象，不要依赖具体类。


