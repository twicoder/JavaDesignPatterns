设计原则：
类应该对扩展开放，对修改关闭

策略模式：

观察者模式

////////////////////////////////////////////////////////////
装饰者模式：
动态地将责任附加到对象上。
想要扩展功能，装饰者提供有别于继承的另一种选择。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
工厂方法模式：
定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。
工厂方法让类把实例化推迟到子类。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
单件模式：
确保一个类只有一个实例，并提供全局访问点。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
命令模式：
将“请求”封装成对象，以便使用不同的请求、队列活着日志来参数
化其他对象。命令模式也支持可撤销的操作。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
适配器模式：
将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口
不兼容的类可以合作无间。
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
外观模式：
提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了
一个高层接口，让子系统更容易使用。
////////////////////////////////////////////////////////////


OO原则：
封装变化
多用组合，少用继承
针对接口编程，不针对实现编程
位交互对象之间的松耦合设计而努力
对扩展开放，对修改关闭
要依赖抽象，不要依赖具体类。
最少知识原则：只和你的密友谈话。



